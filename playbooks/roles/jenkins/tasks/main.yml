---
# file: roles/jenkins/tasks/main.yml

- name: Include OS specific vars
  include_vars: "{{ ansible_facts['os_family'] }}.yml"
  tags:
    - ansibleinstall
    - jenkinsinstall
    - jenkinsfirewall
    - jenkinsconfig
    - jenkinsplugins
    - jenkinsansible
    - jenkinsmatrix
    - jenkinsusers

# Packages
- include: "ansible-install-{{ ansible_facts['os_family'] }}.yml"
  with_items: 
    - "{{ jenkins_ansible_data }}"
  loop_control:
    loop_var: outer_item
  tags:
    - ansibleinstall

- name: Install {{ role_name }} packages
  package:
    name: "{{ jenkins_packages }}"
    state: latest

# Jenkins
- name: Install Jenkins block
  block:
  - include: "jenkins-install-{{ ansible_facts['os_family'] }}.yml"
    with_items: 
      - "{{ jenkins_data }}"
    loop_control:
      loop_var: outer_item

  - name: Ensure services is running and starts on boot
    service:
      name: "{{ item }}"
      state: started
      enabled: true
    with_items: "{{ jenkins_services }}"
# END Install Jenkins block
  tags:
    - jenkinsinstall

# Firewall
- include: "jenkins-firewall-{{ ansible_facts['os_family'] }}.yml"
  tags:
    - jenkinsfirewall

# Post-install
- name: Post install configuration
  include: 'jenkins-initial-config.yml'
  tags:
    - jenkinsconfig
    
# Plugins
- name: Install jenkins plugins
  include: 'jenkins-plugins.yml'
  tags:
    - jenkinsplugins

# Setup plugins
- name: Setup ansible plugin
  jenkins_script:
    user: "{{ jenkins_admin_user.username }}"
    password: "{{ jenkins_admin_password }}"
    script: "{{ jenkins_script_plugin-ansible-setup }}"
    url: "{{ jenkins_external_url }}"
    validate_certs: 'yes'
  register: plugin_ansible_status
  changed_when: plugin_ansible_status.output.find("ansible plugin set") != -1
  tags:
    - jenkinsansible

# Security strategy
- name: Set matrix strategy
  jenkins_script:
    user: "{{ jenkins_admin_user.username }}"
    password: "{{ jenkins_admin_password }}"
    script: "{{ jenkins_script_security_strategy_matrix }}"
    url: "{{ jenkins_external_url }}"
    validate_certs: 'yes'
    args:
      admin_name: "{{ jenkins_admin_user.username }}"
  register: security_users_status
  changed_when: security_users_status.output.find("matrix security set") != -1
  tags:
    - jenkinsmatrix

# Users
- name: Configure users
  include: 'jenkins-users.yml'
  with_items: "{{ jenkins_users }}"
  tags:
    - jenkinsusers

# Ansible
- name: Configure ansible
  include: 'ansible-clients.yml'
  with_items: "{{ groups['testweb'] }}"
  tags:
    - ansibleclients

# Credentials
- name: Create ssh credential
  jenkins_script:
    user: "{{ jenkins_admin_user.username }}"
    password: "{{ jenkins_admin_password }}"
    script: "{{ jenkins_script_credentials }}"
    url: "{{ jenkins_external_url }}"
    validate_certs: 'yes'
    args:
      username: "{{ ansible_user_srv.username }}"
      key_file: "home/{{ ansible_user_srv.username }}/.ssh/id_rsa"
      credential_type: "ssh"
  register: credentials_status
  changed_when: security_users_status.output.find("ssh credential created") != -1
  tags:
    - jenkinscredentials

# Jobs



# - include: "{{ playbook_dir }}/tasks/vagrant-user.yml"
#   tags:
#     - vagrant